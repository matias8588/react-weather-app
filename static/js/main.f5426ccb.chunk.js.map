{"version":3,"sources":["Components/Loading/Loading.jsx","Components/Weather/Weather.jsx","Components/Navbar/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Loading","react_default","a","createElement","Spinner_default","animation","role","className","Component","Weather","state","lat","undefined","lon","city","status","temperatureC","humidity","maxTemp","minTemp","wind","icon","sunrise","sunset","errorMessage","getPosition","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","_callee","latitude","longitude","api_call","data","regenerator_default","wrap","_context","prev","next","process","fetch","concat","sent","json","console","log","weather","main","_this","setState","name","condition","description","charAt","toUpperCase","slice","Math","round","temp","temp_max","temp_min","speed","moment","unix","sys","format","stop","_this2","this","then","position","coords","catch","err","message","timerID","setInterval","clearInterval","_this$state","src","alt","id","Loading_Loading","NavBar","Navbar_default","bg","variant","Brand","href","App","Navbar_NavBar","Weather_Weather_Weather","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f5426ccb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\nexport default class Loading extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Spinner animation=\"border\" role=\"status\">\r\n          <span className=\"sr-only\">Loading...</span>\r\n        </Spinner>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport moment from \"moment\";\r\nimport Loading from \"../Loading/Loading.jsx\";\r\nimport \"./Weather.scss\";\r\n\r\nexport default class Weather extends Component {\r\n  state = {\r\n    lat: undefined,\r\n    lon: undefined,\r\n    city: undefined,\r\n    status: undefined,\r\n    temperatureC: undefined,\r\n    humidity: undefined,\r\n    maxTemp: undefined,\r\n    minTemp: undefined,\r\n    wind: undefined,\r\n    icon: undefined,\r\n    sunrise: undefined,\r\n    sunset: undefined,\r\n    errorMessage: undefined,\r\n  };\r\n\r\n  getPosition = () => {\r\n    return new Promise(function(resolve, reject) {\r\n      navigator.geolocation.getCurrentPosition(resolve, reject);\r\n    });\r\n  };\r\n\r\n  getWeather = async (latitude, longitude) => {\r\n    const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\r\n    const api_call = await fetch(\r\n      `//api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric&lang=es`,\r\n    );\r\n    const data = await api_call.json();\r\n    console.log(data);\r\n    console.log(data.weather[0].main);\r\n    this.setState({\r\n      lat: latitude,\r\n      lon: longitude,\r\n      city: data.name,\r\n      status: data.weather[0].main,\r\n      condition:\r\n        data.weather[0].description.charAt(0).toUpperCase() +\r\n        data.weather[0].description.slice(1),\r\n      temperatureC: Math.round(data.main.temp),\r\n      humidity: data.main.humidity,\r\n      maxTemp: Math.round(data.main.temp_max),\r\n      minTemp: Math.round(data.main.temp_min),\r\n      wind: data.wind.speed,\r\n      icon: data.weather[0].icon,\r\n      sunrise: moment.unix(data.sys.sunrise).format(\"hh:mm a\"),\r\n      sunset: moment.unix(data.sys.sunset).format(\"hh:mm a\"),\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getPosition()\r\n      .then(position => {\r\n        this.getWeather(position.coords.latitude, position.coords.longitude);\r\n      })\r\n      .catch(err => {\r\n        this.setState({ errorMessage: err.message });\r\n      });\r\n\r\n    this.timerID = setInterval(\r\n      () => this.getWeather(this.state.lat, this.state.lon),\r\n      100000,\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      city,\r\n      status,\r\n      condition,\r\n      temperatureC,\r\n      humidity,\r\n      maxTemp,\r\n      minTemp,\r\n      wind,\r\n      icon,\r\n      sunrise,\r\n      sunset,\r\n    } = this.state;\r\n\r\n    if ((city && status === \"Clear\") || (city && status === \"Clouds\")) {\r\n      return (\r\n        <div className=\"App\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col\">\r\n                <div className=\"weather-card one\">\r\n                  <div className=\"top\">\r\n                    <div className=\"wrapper\">\r\n                      <h1 className=\"heading\">\r\n                        <img\r\n                          className=\"weather-icon\"\r\n                          src={`http://openweathermap.org/img/w/${icon}.png`}\r\n                          alt=\"weather icon\"\r\n                        />\r\n                        {condition}\r\n                      </h1>\r\n                      <h3 className=\"location\">{city}</h3>\r\n                      <p className=\"temp\">\r\n                        <span className=\"temp-value\">{temperatureC}</span>\r\n                        <span className=\"deg\">0</span>\r\n                        <span className=\"temp-type\">C</span>\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"bottom\">\r\n                    <div className=\"wrapper\">\r\n                      <ul className=\"forecast\">\r\n                        <li className=\"active\">\r\n                          <div id=\"weather-item\">\r\n                            <span>Salida del sol: {sunrise}</span>\r\n                          </div>\r\n                          <div id=\"weather-item\">\r\n                            <span>Puesta del sol: {sunset}</span>\r\n                          </div>\r\n                          <div id=\"weather-item\">\r\n                            <span>Máxima prevista: {maxTemp}&deg;C</span>\r\n                          </div>\r\n                          <div id=\"weather-item\">\r\n                            <span>Mínima prevista: {minTemp}&deg;C</span>\r\n                          </div>\r\n                          <div id=\"weather-item\">\r\n                            <span>Viento: {wind} km/h</span>\r\n                          </div>\r\n                          <div id=\"weather-item\">\r\n                            <span>Humedad: {humidity}%</span>\r\n                          </div>\r\n                        </li>\r\n                      </ul>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else if (city && status !== \"Clear\") {\r\n      return (\r\n        <div className=\"App\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col\">\r\n                <div className=\"weather-card rain\">\r\n                  <div className=\"top\">\r\n                    <div className=\"wrapper\">\r\n                      <h1 className=\"heading\">\r\n                        <img\r\n                          className=\"weather-icon\"\r\n                          src={`http://openweathermap.org/img/w/${icon}.png`}\r\n                          alt=\"weather icon\"\r\n                        />\r\n                        {condition}\r\n                      </h1>\r\n                      <h3 className=\"location\">{city}</h3>\r\n                      <p className=\"temp\">\r\n                        <span className=\"temp-value\">{temperatureC}</span>\r\n                        <span className=\"deg\">0</span>\r\n                        <span className=\"temp-type\">C</span>\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"bottom\">\r\n                    <div className=\"wrapper\">\r\n                      <ul className=\"forecast\">\r\n                        <li className=\"active\">\r\n                          <div className=\"weather-item\">\r\n                            <span>Salida del sol: {sunrise}</span>\r\n                          </div>\r\n                          <div id=\"weather-item\">\r\n                            <span>Puesta del sol: {sunset}</span>\r\n                          </div>\r\n                          <div id=\"weather-item\">\r\n                            <span>Máxima prevista: {maxTemp}&deg;C</span>\r\n                          </div>\r\n                          <div id=\"weather-item\">\r\n                            <span>Mínima prevista: {minTemp}&deg;C</span>\r\n                          </div>\r\n                          <div id=\"weather-item\">\r\n                            <span>Viento: {wind} km/h</span>\r\n                          </div>\r\n                          <div id=\"weather-item\">\r\n                            <span>Humedad: {humidity}%</span>\r\n                          </div>\r\n                        </li>\r\n                      </ul>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <div className=\"App\">\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col\">\r\n                  <Loading />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import Navbar from \"react-bootstrap/Navbar\";\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nexport default class NavBar extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n          <Navbar.Brand href=\"#home\">{\" Clima hoy\"}</Navbar.Brand>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Weather from './Components/Weather/Weather.jsx'\r\nimport NavBar from './Components/Navbar/Navbar.jsx'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavBar />\r\n        <Weather />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}